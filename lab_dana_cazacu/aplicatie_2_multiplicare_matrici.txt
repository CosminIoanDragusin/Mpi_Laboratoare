#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;

#define FROM_MASTER 1
#define FROM_WORKER 2
#define DEBUG 1 
#define na 4
#define ma 5
#define nb 5
#define mb 4
#define SIZE ma

MPI_Status status;

static double a[na][ma];
static double b[nb][mb];
static double c[na][mb];

static void init_matrix(void)
{
    for (int i = 0; i < na; i++)
    {
        for (int j = 0; j < ma; j++)
        {
            a[i][j] = (rand() % 3) + 1;

        } //end for i for a
    }  //end for j for a

    for (int i = 0; i < nb; i++)
    {
        for (int j = 0; j < mb; j++)
        {
            b[i][j] = (rand() % 5) + 1;
        }
    }

} //end init_matrix()


static void print_matrix(void)
{
    int i, j;
    printf("Matricea C");
    cout << endl;
    for (i = 0; i < na; i++) {
        for (j = 0; j < mb; j++) {
            printf("%7.2f", c[i][j]);
        } //end for i
        printf("\n");
    }    //end for j
}        //end print_matrix

int main(int argc, char** argv)
{
    //calcul timp executie secvential
    /* clock_t t;
     t = clock();
     for (int i = 0; i < na; i++)
     {
         int sum = 0;
         for (int j = 0; j < mb; j++)
         {
             for (int x = 0; x < ma; x++)
             {
                 sum += (a[i][x] * b[x][j]);
             }
             c[i][j] = sum;
         }
     }
     t = clock() - t;
     double time_taken = ((double)t)/CLOCKS_PER_SEC;
     cout << "Calculul produsului matriceal a durat : " << fixed << time_taken << setprecision(5);
     */

    int myrank, nproc;
    int rows;
    int mtype;
    int dest, src, offseta, offsetb;
    double start_time, end_time;
    int i, j, k, l;
    ofstream fout("out.txt");
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &nproc);
    MPI_Comm_rank(MPI_COMM_WORLD, &myrank);

    rows = SIZE / nproc;  //compute the block size
    mtype = FROM_MASTER; //  =1

    if (myrank == 0) {
        /*Initialization*/
        printf("SIZE = %d, number of nodes = %d\n", SIZE, nproc);
        init_matrix();
        printf("Matricea A");
        cout << endl;
         for (int i = 1; i <= na; i++) {
             for (int j = 1; j <= ma; j++)
                 cout << a[i][j] << " ";
             cout << endl;
         }
         printf("Matricea B");
         cout << endl;
         for (int i = 1; i <= nb; i++) {
             for (int j = 1; j <= mb; j++)
                 cout << b[i][j] << " ";
             cout << endl;
         }
         
        start_time = MPI_Wtime();

        if (nproc == 1) {
            for (int i = 0; i < na; i++) {
                for (int j = 0; j < mb; j++) {
                    for (int k = 0; k < ma; k++)
                        c[i][j] = c[i][j] + a[i][k] * b[k][j];
                } //end for i
            }  //end for j
            end_time = MPI_Wtime();
            print_matrix();//---------------------------------
            for (int i = 0; i < na; i++)
            {
                for (int j = 0; j < mb; j++)
                {
                    fout << c[i][j] << " ";
                }
                fout << endl;
            }
            printf("Execution time on %2d nodes: %f\n", nproc, end_time -
                start_time);
        } // end  if(nproc == 1)

        else {

            for (int l = 0; l < nproc; l++) {
                offsetb = rows * l;  //start from (block size * processor id)
                offseta = rows;
                mtype = FROM_MASTER; // tag =1

                for (dest = 1; dest < nproc; dest++) {
                    MPI_Send(&offseta, 1, MPI_INT, dest, mtype,
                        MPI_COMM_WORLD);
                    MPI_Send(&offsetb, 1, MPI_INT, dest, mtype,
                        MPI_COMM_WORLD);
                    MPI_Send(&rows, 1, MPI_INT, dest, mtype, MPI_COMM_WORLD);
                    MPI_Send(&a[offseta][0], rows * SIZE, MPI_DOUBLE, dest,
                        mtype, MPI_COMM_WORLD);
                    MPI_Send(&b[0][offsetb], rows * SIZE, MPI_DOUBLE, dest,
                        mtype, MPI_COMM_WORLD);

                    offseta += rows;
                    offsetb = (offsetb + rows) % SIZE;

                } // end for dest

                offseta = rows;
                offsetb = rows * l;

                //--mult the final local and print final global mult
                for (int i = 0; i < offseta; i++) {
                    for (int j = offsetb; j < offsetb + rows; j++) {
                        for (int k = 0; k < ma; k++) {
                            c[i][j] = c[i][j] + a[i][k] * b[k][j];
                        }//end for k
                    } //end for j
                }// end for i
                   /*- wait for results from all worker tasks */
                mtype = FROM_WORKER;
                for (src = 1; src < nproc; src++) {
                    MPI_Recv(&offseta, 1, MPI_INT, src, mtype, MPI_COMM_WORLD,
                        &status);
                    MPI_Recv(&offsetb, 1, MPI_INT, src, mtype, MPI_COMM_WORLD,
                        &status);
                    MPI_Recv(&rows, 1, MPI_INT, src, mtype, MPI_COMM_WORLD,
                        &status);
                    for (int i = 0; i < rows; i++) {
                        MPI_Recv(&c[offseta + i][offsetb], offseta, MPI_DOUBLE,
                            src, mtype, MPI_COMM_WORLD, &status);
                    } //end for scr
                }//end for i
            } //end for l
            end_time = MPI_Wtime();
            print_matrix();
            for (int i = 0; i < na; i++)
            {
                for (int j = 0; j < mb; j++)
                {
                    fout << c[i][j] << " ";
                }
                fout << endl;
            }
            printf("Execution time on %2d nodes: %f\n", nproc, end_time -
                start_time);
        }//end else
    } //end if (myrank == 0) 

    else{
        /*---------------------------- worker----------------------*/
        if (nproc > 1) {
            for (int l = 0; l < nproc; l++) {
                mtype = FROM_MASTER;
                MPI_Recv(&offseta, 1, MPI_INT, 0, mtype, MPI_COMM_WORLD,
                    &status);
                MPI_Recv(&offsetb, 1, MPI_INT, 0, mtype, MPI_COMM_WORLD,
                    &status);
                MPI_Recv(&rows, 1, MPI_INT, 0, mtype, MPI_COMM_WORLD,
                    &status);

                MPI_Recv(&a[offseta][0], rows * SIZE, MPI_DOUBLE, 0, mtype,
                    MPI_COMM_WORLD, &status);
                MPI_Recv(&b[0][offsetb], rows * SIZE, MPI_DOUBLE, 0, mtype,
                    MPI_COMM_WORLD, &status);

                for (int i = offseta; i < offseta + rows; i++) {
                    for (int j = offsetb; j < offsetb + rows; j++) {
                        for (int k = 0; k < ma; k++) {
                            c[i][j] = c[i][j] + (a[i][k] * b[k][j]);
                        } //end for j
                    } //end for i    

                } //end for l

                mtype = FROM_WORKER;
                MPI_Send(&offseta, 1, MPI_INT, 0, mtype, MPI_COMM_WORLD);
                MPI_Send(&offsetb, 1, MPI_INT, 0, mtype, MPI_COMM_WORLD);
                MPI_Send(&rows, 1, MPI_INT, 0, mtype, MPI_COMM_WORLD);
                for (int i = 0; i < rows; i++) {
                    MPI_Send(&c[offseta + i][offsetb], offseta, MPI_DOUBLE, 0,
                        mtype, MPI_COMM_WORLD);

                } //end for i
            }//end for l

        } //end if (nproc > 1)
    } // end else
    fout.close();
    MPI_Finalize();
    return 0;
} //end main()